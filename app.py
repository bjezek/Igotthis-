{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8e94299b-82cf-4564-ac26-cf7e00578e43",
   "metadata": {},
   "outputs": [],
   "source": [
    "import csv\n",
    "from pathlib import Path\n",
    "\n",
    "\n",
    "# This function loads a CSV file from the filepath defined in `csvpath`\n",
    "def load_csv(csvpath):\n",
    "    with open(csvpath, \"r\") as csvfile:\n",
    "        data = []\n",
    "        csvreader = csv.reader(csvfile, delimiter=\",\")\n",
    "\n",
    "        # Skip the CSV Header\n",
    "        next(csvreader)\n",
    "\n",
    "        # Read the CSV data\n",
    "        for row in csvreader:\n",
    "            data.append(row)\n",
    "    return data\n",
    "\n",
    "\n",
    "# This function loads a CSV file with the list of banks and available loans information\n",
    "# from the file defined in `file_path`\n",
    "def load_bank_data(file_path):\n",
    "    csvpath = Path(file_path)\n",
    "    return load_csv(csvpath)\n",
    "\n",
    "\n",
    "# As a lender,\n",
    "# I want to calculate the monthly debt-to-income ratio\n",
    "# so that we can assess the ability to pay of the borrower\n",
    "def calculate_monthly_debt_ratio(monthly_debt_payment, monthly_income):\n",
    "    monthly_debt_ratio = int(monthly_debt_payment) / int(monthly_income)\n",
    "    return monthly_debt_ratio\n",
    "\n",
    "\n",
    "# As a lender,\n",
    "# I want to calculate the loan-to-value ratio\n",
    "# so that we can evaluate the risk of lending money to the borrower\n",
    "def calculate_loan_to_value_ratio(loan_amount, home_value):\n",
    "    loan_to_value_ratio = int(loan_amount) / int(home_value)\n",
    "    return loan_to_value_ratio\n",
    "\n",
    "# @TODO Define a function that implements the following user story:\n",
    "# As a lender,\n",
    "# I want to filter the bank list by checking the customer's desired loan against the bank's maximum loan size\n",
    "# so that we can know which banks offer the loan amount requested by the customer\n",
    "def filter_max_loan_size(loan_amount, bank_list):\n",
    "\n",
    "\n",
    "\n",
    "# @TODO Define a function that implements the following user story:\n",
    "# As a lender,\n",
    "# I want to filter the bank list by checking if the customer's credit score is equal to or greater than the minimum allowed credit score defined by the bank\n",
    "# so that we can know which banks are willing to offer a loan to the customer\n",
    "def filter_credit_score(credit_score, bank_list):\n",
    "\n",
    "\n",
    "\n",
    "# @TODO Define a function that implements the following user story:\n",
    "# As a lender,\n",
    "# I want to filter the bank list by comparing if the customer's debt-to-income is equal to or less than the maximum debt-to-income ratio allowed by the bank\n",
    "# so that we can assess if the customer will have payment capacity according to the bank's criteria\n",
    "def filter_debt_to_income(monthly_debt_ratio, bank_list):\n",
    "\n",
    "\n",
    "\n",
    "# @TODO Define a function that implements the following user story:\n",
    "# As a lender,\n",
    "# I want to filter the bank list by checking if the customer's loan-to-value is equal to or less than the maximum loan-to-value ratio allowed by the bank\n",
    "# so that we assess if the customer's home value is worth as an asset to secure the loan\n",
    "def filter_loan_to_value(loan_to_value_ratio, bank_list):\n",
    "\n",
    "\n",
    "\n",
    "# This function implements the following user story:\n",
    "# As a customer,\n",
    "# I want to know what are the best loans in the market according to my financial profile\n",
    "# so that I can choose the best option according to my needs\n",
    "def find_qualifying_loans(bank_data, credit_score, debt, income, loan, home_value):\n",
    "    # Calculate the monthly debt ratio\n",
    "    monthly_debt_ratio = calculate_monthly_debt_ratio(debt, income)\n",
    "    print(f\"The monthly debt to income ratio is {monthly_debt_ratio:.02f}\")\n",
    "\n",
    "    # Calculate loan to value ratio\n",
    "    loan_to_value_ratio = calculate_loan_to_value_ratio(loan, home_value)\n",
    "    print(f\"The loan to value ratio is {loan_to_value_ratio:.02f}.\")\n",
    "\n",
    "    # Run qualification filters\n",
    "    bank_data_filtered = filter_max_loan_size(loan, bank_data)\n",
    "    bank_data_filtered = filter_credit_score(credit_score, bank_data_filtered)\n",
    "    bank_data_filtered = filter_debt_to_income(monthly_debt_ratio, bank_data_filtered)\n",
    "    bank_data_filtered = filter_loan_to_value(loan_to_value_ratio, bank_data_filtered)\n",
    "\n",
    "    print(f\"Found {len(bank_data_filtered)} qualifying loans\")\n",
    "\n",
    "    return bank_data_filtered\n",
    "\n",
    "\n",
    "# This function is the main execution point of the application. It triggers all the business logic.\n",
    "def run():\n",
    "    # Set the file path of the CSV file with the banks and loans information\n",
    "    file_path = Path(\"./data/daily_rate_sheet.csv\")\n",
    "    # Load the latest Bank data\n",
    "    bank_data = load_bank_data(file_path)\n",
    "\n",
    "    # This print statement will display all of the bank data that is provided.\n",
    "    # print(f\"bank_data: {bank_data}\")\n",
    "\n",
    "    # The following lines, set the applicant's information and implements the following user story:\n",
    "    # As a customer,\n",
    "    # I want to provide my financial information\n",
    "    # so that I can apply for a loan\n",
    "    credit_score = 750\n",
    "    debt = 5000\n",
    "    income = 20000\n",
    "    loan_amount = 100000\n",
    "    home_value = 210000\n",
    "\n",
    "    # Find qualifying loans\n",
    "    qualifying_loans = find_qualifying_loans(\n",
    "        bank_data, credit_score, debt, income, loan_amount, home_value\n",
    "    )\n",
    "\n",
    "    # Print the list of qualifying loans\n",
    "    print(qualifying_loans)\n",
    "\n",
    "\n",
    "run()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
